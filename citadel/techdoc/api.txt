 Yeesh.
 
 This is a rough start at the beginnings of what will eventually become
something that resembles a draft of the implementation of an API for writing
Citadel extensions...
 
 In other words, as functions are developed we'll stick writeups in here.

 
 
 CONVENTIONS
 -----------
 
 1. All user-callable functions start with "Ctdl".
 
 2. The functions starting with "CtdlInternal" are only to be used by other
API functions.  They are implemented mainly to consolidate the common code
used by similar API functions, and make their implementation simple and
straightforward.



 WRITING A SERVER-SIDE APPLICATION
 ---------------------------------
  
 Server-side applications written to the CitadelAPI may be written in any
language, as long as the "citadelapi" library is linked in.  Unlike normal
user-mode programs, you must not declare a main() function, and there will be
no stdin/stdout/stderr available.  Instead, you must declare this:
 
 void CtdlMain() {
                 /* your program's main loop goes here */
                 }
 
 When a server-side application is started, the main() loop inside the
CitadelAPI is invoked.  This will perform all of the necessary initialization
(attach to the server, authenticate, identify itself, etc.) and then call
your program's CtdlMain() loop.
   
 By the time CtdlMain() receives control, there will be two public symbols
you can access, which point to data structures containing various information
that may be useful to the program:
 
 extern struct CtdlServerHandle CtdlAppHandle;
 extern struct CtdlServInfo CtdlAppServInfo;

 CtdlAppHandle contains various information about how and why this program is
connected to the server.  CtdlAppSrvInfo contains various static information
about the server the program is connected to.  Both CtdlServerHandle and
CtdlServInfo are defined in the standard header files.
 
 
 
 ERROR HANDLING
 --------------
 
 int CtdlGetLastError()
 
 Returns the error code of a failed API call.  The error codes used by the
API are the same as those used by the Citadel session layer protocol, in order
to facilitate a consistent development experience.



 INTERPROCESS COMMUNICATION FUNCTIONS
 ------------------------------------
 
 int CtdlSendExpressMessage(char *ToUser, char *MsgText)
 
 This function sends an express message (page) to the named user.
 
 
 
 USER ACCOUNT FUNCTIONS
 ----------------------
 The user account functions require administrative or privileged access.  They
return -1 in the event of an error.
 

 
 int CtdlGetUserPassword(char *buf, char *WhichUser)
 int CtdlSetUserPassword(char *buf, char *WhichUser)
 
 Get or set the password for a user account.
 
 
 unsigned int CtdlGetUserFlags(char *WhichUser)
 int CtdlSetUserFlags(unsigned int NewFlags, char *WhichUser)
 
 Get or set the various bits associated with a user account.  Be careful with
these flags; it is possible to corrupt a user account by handling them the
wrong way.  It is best to call CtdlGetUserFlags() to acquire the current set
of flags, then twiddle the bits you're interested in, then call
CtdlSetUserFlags() to write them back.


 int CtdlGetUserTimesCalled(char *WhichUser)
 int CtdlSetUserTimesCalled(unsigned int NewValue, char *WhichUser)
 
 Get or set the "number of times called" value for a user.


 int CtdlGetUserMessagesPosted(char *WhichUser)
 int CtdlSetUserMessagesPosted(unsigned int NewValue, char *WhichUser)
 
 Get or set the "number of messages posted" value for a user.


 int CtdlGetUserAccessLevel(char *WhichUser)
 int CtdlSetUserAccessLevel(unsigned int NewValue, char *WhichUser)
 
 Get or set a user's access level.


 long CtdlGetUserNumber(char *WhichUser)
 int CtdlSetUserNumber(long NewValue, char *WhichUser)
 
 Get or set the user number,  In general there is never any reason to change
a user's number.  If for some reason you need to do this, be sure not to use
a user number which already exists, or which has not yet been assigned.

 
 time_t CtdlGetUserLastCall(char *WhichUser)
 int CtdlSetUserLastCall(time_t NewValue, char *WhichUser)
  
 Get or set the timestamp of a user's last call.


 int CtdlForEachUser(int (*CallBack)(char *EachUser))
 
 This allows a user-supplied function to be called once for each user account
on the system; the single argument passed to the function will be the name of
the user being processed.

