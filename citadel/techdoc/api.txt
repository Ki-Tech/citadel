 Yeesh.
 
 This is a rough start at the beginnings of what will eventually become
something that resembles a draft of the implementation of an API for writing
Citadel extensions...
 
 In other words, as functions are developed we'll stick writeups in here.

 
 
 CONVENTIONS
 -----------
 
 1. All user-callable functions start with "Ctdl".
 
 2. The functions starting with "CtdlInternal" are only to be used by other
API functions.  They are implemented mainly to consolidate the common code
used by similar API functions, and make their implementation simple and
straightforward.



 WRITING A SERVER-SIDE APPLICATION
 ---------------------------------
  
 Server-side applications written to the CitadelAPI may be written in any
language, as long as the "citadelapi" library is linked in.  Unlike normal
user-mode programs, you must not declare a main() function, and there will be
no stdin/stdout/stderr available.  Instead, you must declare this:
 
 void CtdlMain() {
                 /* your program's main loop goes here */
                 }
 
 When a server-side application is started, the main() loop inside the
CitadelAPI is invoked.  This will perform all of the necessary initialization
(attach to the server, authenticate, identify itself, etc.) and then call
your program's CtdlMain() loop.
   
 By the time CtdlMain() receives control, there will be two public symbols
you can access, which point to data structures containing various information
that may be useful to the program:
 
 extern struct CtdlServerHandle CtdlAppHandle;
 extern struct CtdlServInfo CtdlAppServInfo;

 CtdlAppHandle contains various information about how and why this program is
connected to the server.  CtdlAppSrvInfo contains various static information
about the server the program is connected to.  Both CtdlServerHandle and
CtdlServInfo are defined in the standard header files.
 
 
 
 ERROR HANDLING
 --------------
 
 int CtdlGetLastError()
 
 Returns the error code of a failed API call.  The error codes used by the
API are the same as those used by the Citadel session layer protocol, in order
to facilitate a consistent development experience.



 INTERPROCESS COMMUNICATION FUNCTIONS
 ------------------------------------
 
 int CtdlSendExpressMessage(char *ToUser, char *MsgText)
 
 This function sends an express message (page) to the named user.
